# -*- coding: utf-8 -*-
"""
Aux functions to load images in the compressed form.
Both functions require the number of rows and columns used during compression.

@author: Giulio Del Corso
"""



#%% Libraries
import os
import pandas as pd
import math
from PIL import Image



#%% Load img aux function
def load_img_name(img, path_folder, n_row = 10, n_columns = 10):
    '''
    Aux function that load the tile corresponding to image name.
    
    img [string] : name of the image to be loaded
    path_folder [path] : folder containing the subfolder of images
    n_row [int = 10] : number of rows in the combined image 
    n_columns [int = 10] : number of columns in the combined image 
    '''
    
    # Identify the index, color and the shape
    shape = img.split('_')[1]
    color = img.split('_')[2].strip("()").replace(" ","").replace(",","-")
    index = int(img.split('_')[3])
    
    # Sub Folder path
    path_sub_folder = os.path.join(path_folder,
                                   "shape-"+str(shape)+"_color-"+str(color))
    list_combined_img = os.listdir(path_sub_folder)
    
    # Having the index we can define the combined image containing the img
    selected_list = [i for i in list_combined_img if (index>=int(i.split("_")[1].replace('.png',"")))and(index<=int(i.split("_")[2].replace('.png',"")))]
    selected_combined_img = Image.open(os.path.join(path_sub_folder, selected_list[0]))
    
    # Find image size:
    img_height = int(selected_combined_img.size[1]/n_row)
    img_width = int(selected_combined_img.size[0]/n_columns)
    
    # Rescale index
    index = index-int(selected_list[0].split("_")[1].replace('.png',""))
    
    # Selected subsquare
    row = index // n_columns
    col = index % n_columns
    
    x = col * img_width
    y = row * img_height
    selected_img = selected_combined_img.crop((x, y, x + img_width, y + img_height))
 
    
    return selected_img

#%% Load img given index aux function
def load_img_index(selected_index, df, path_folder, n_row = 10, n_columns = 10):
    '''
    Aux function that load the tile corresponding to image index.
    
    selected_index [int] : row index of the dataframe
    df [panda dataframe] : combined dataframe generated by NA_DA
    path_folder [path] : folder containing the subfolder of images
    n_row [int = 10] : number of rows in the combined image 
    n_columns [int = 10] : number of columns in the combined image 
    '''
    
    # Identify the image corresponding to the given row
    selected_image = df.iloc[selected_index]['ID_image']
    
    # Load the image using the load_img_name function
    selected_img = load_img_name(selected_image, path_folder, n_row = n_row, n_columns = n_columns)
 
    
    return selected_img